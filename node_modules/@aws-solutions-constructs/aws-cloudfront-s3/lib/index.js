"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFrontToS3 = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const defaults = require("@aws-solutions-constructs/core");
const resources = require("@aws-solutions-constructs/resources");
// Note: To ensure CDKv2 compatibility, keep the import statement for Construct separate
const constructs_1 = require("constructs");
class CloudFrontToS3 extends constructs_1.Construct {
    /**
     * @summary Constructs a new instance of the CloudFrontToS3 class.
     * @param {Construct} scope - represents the scope for all the resources.
     * @param {string} id - this is a a scope-unique id.
     * @param {CloudFrontToS3Props} props - user provided props for the construct
     * @since 0.8.0
     * @access public
     */
    constructor(scope, id, props) {
        super(scope, id);
        // All our tests are based upon this behavior being on, so we're setting
        // context here rather than assuming the client will set it
        this.node.setContext("@aws-cdk/aws-s3:serverAccessLogsUseBucketPolicy", true);
        defaults.CheckS3Props(props);
        defaults.CheckCloudFrontProps(props);
        let originBucket;
        if (!props.existingBucketObj) {
            const buildS3BucketResponse = defaults.buildS3Bucket(this, {
                bucketProps: props.bucketProps,
                loggingBucketProps: props.loggingBucketProps,
                logS3AccessLogs: props.logS3AccessLogs
            });
            this.s3Bucket = buildS3BucketResponse.bucket;
            this.s3LoggingBucket = buildS3BucketResponse.loggingBucket;
            originBucket = this.s3Bucket;
        }
        else {
            originBucket = props.existingBucketObj;
        }
        this.s3BucketInterface = originBucket;
        // Define the CloudFront Distribution
        const cloudFrontDistributionForS3Props = {
            sourceBucket: this.s3BucketInterface,
            cloudFrontDistributionProps: props.cloudFrontDistributionProps,
            httpSecurityHeaders: props.insertHttpSecurityHeaders,
            cloudFrontLoggingBucketProps: props.cloudFrontLoggingBucketProps,
            responseHeadersPolicyProps: props.responseHeadersPolicyProps
        };
        const cloudFrontDistributionForS3Response = defaults.createCloudFrontDistributionForS3(this, id, cloudFrontDistributionForS3Props);
        this.cloudFrontWebDistribution = cloudFrontDistributionForS3Response.distribution;
        this.cloudFrontFunction = cloudFrontDistributionForS3Response.cloudfrontFunction;
        this.cloudFrontLoggingBucket = cloudFrontDistributionForS3Response.loggingBucket;
        this.originAccessControl = cloudFrontDistributionForS3Response.originAccessControl;
        // Attach the OriginAccessControl to the CloudFront Distribution, and remove the OriginAccessIdentity
        const l1CloudFrontDistribution = this.cloudFrontWebDistribution.node.defaultChild;
        l1CloudFrontDistribution.addPropertyOverride('DistributionConfig.Origins.0.OriginAccessControlId', this.originAccessControl?.attrId);
        if (props.originPath) {
            l1CloudFrontDistribution.addPropertyOverride('DistributionConfig.Origins.0.OriginPath', props.originPath);
        }
        // Grant CloudFront permission to get the objects from the s3 bucket origin
        originBucket.addToResourcePolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['s3:GetObject'],
            principals: [new iam.ServicePrincipal('cloudfront.amazonaws.com')],
            resources: [originBucket.arnForObjects('*')],
            conditions: {
                StringEquals: {
                    'AWS:SourceArn': `arn:aws:cloudfront::${aws_cdk_lib_1.Aws.ACCOUNT_ID}:distribution/${this.cloudFrontWebDistribution.distributionId}`
                }
            }
        }));
        // We need to create a custom resource to introduce the indirection necessary to avoid
        // a circular dependency when granting the CloudFront distribution access to use the
        // KMS key to decrypt objects. Without this indirection, it is not possible to reference
        // the CloudFront distribution ID in the KMS key policy because -
        //   * The S3 bucket references the KMS key
        //   * The CloudFront distribution references the bucket
        //   * The KMS key references the CloudFront distribution
        let encryptionKey;
        if (props.bucketProps && props.bucketProps.encryptionKey) {
            encryptionKey = props.bucketProps.encryptionKey;
        }
        else if (props.existingBucketObj && props.existingBucketObj.encryptionKey) {
            encryptionKey = props.existingBucketObj.encryptionKey;
        }
        if (encryptionKey) {
            resources.createKeyPolicyUpdaterCustomResource(this, {
                distribution: this.cloudFrontWebDistribution,
                encryptionKey
            });
        }
    }
}
exports.CloudFrontToS3 = CloudFrontToS3;
_a = JSII_RTTI_SYMBOL_1;
CloudFrontToS3[_a] = { fqn: "@aws-solutions-constructs/aws-cloudfront-s3.CloudFrontToS3", version: "2.54.1" };
//# sourceMappingURL=data:application/json;base64,