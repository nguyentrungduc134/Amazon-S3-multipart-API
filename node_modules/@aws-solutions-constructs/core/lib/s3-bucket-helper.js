"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckS3Props = exports.addCfnNagS3BucketNotificationRulesToSuppress = exports.buildS3Bucket = exports.createAlbLoggingBucket = exports.createCloudFrontLoggingBucket = exports.createS3AccessLoggingBucket = void 0;
const s3 = require("aws-cdk-lib/aws-s3");
const s3_bucket_defaults_1 = require("./s3-bucket-defaults");
const utils_1 = require("./utils");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function createS3AccessLoggingBucket(scope, bucketId, loggingBucketProps) {
    // Introduce the default props since we can't be certain the caller used them and
    // they are important best practices
    const combinedBucketProps = utils_1.consolidateProps(s3_bucket_defaults_1.DefaultS3Props(), loggingBucketProps);
    // Create the Logging Bucket
    // NOSONAR  (typescript:S6281)
    // Block Public Access is set by DefaultS3Props, but Sonarqube can't detect it
    // It is verified by 's3 bucket with default props' in the unit tests
    // NOSONAR (typescript:S6245)
    // Encryption is turned on in the default properties that Sonarqube doesn't see
    // Verified by unit test 's3 bucket with default props'
    // NOSONAR (typescript:S6249)
    // enforceSSL  is turned on in the default properties that Sonarqube doesn't see
    // Verified by unit test 's3 bucket with default props'
    // NOSONAR (typescript:typescript:S6249)
    // versioning is turned on in the default properties that Sonarqube doesn't see
    // Verified by unit test 's3 bucket with default props'
    const loggingBucket = new s3.Bucket(scope, bucketId, combinedBucketProps); // NOSONAR
    utils_1.addCfnSuppressRules(loggingBucket, [
        {
            id: 'W35',
            reason: "This S3 bucket is used as the access logging bucket for another bucket"
        }
    ]);
    return loggingBucket;
}
exports.createS3AccessLoggingBucket = createS3AccessLoggingBucket;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function createCloudFrontLoggingBucket(scope, bucketId, loggingBucketProps) {
    // Introduce the default props since we can't be certain the caller used them and
    // they are important best practices
    let combinedBucketProps = utils_1.consolidateProps(s3_bucket_defaults_1.DefaultS3Props(), loggingBucketProps);
    if (!loggingBucketProps.serverAccessLogsBucket) {
        // Create bucket and add to props
        const accessLogBucket = new s3.Bucket(scope, `${bucketId}AccessLog`, combinedBucketProps); // NOSONAR
        combinedBucketProps = utils_1.overrideProps(combinedBucketProps, { serverAccessLogsBucket: accessLogBucket });
        utils_1.addCfnSuppressRules(accessLogBucket, [
            {
                id: 'W35',
                reason: "This S3 bucket is used as the access logging bucket for another bucket"
            }
        ]);
    }
    // Create the Logging Bucket
    // NOSONAR  (typescript:S6281)
    // Block Public Access is set by DefaultS3Props, but Sonarqube can't detect it
    // It is verified by 's3 bucket with default props' in the unit tests
    // NOSONAR (typescript:S6245)
    // Encryption is turned on in the default properties that Sonarqube doesn't see
    // Verified by unit test 's3 bucket with default props'
    // NOSONAR (typescript:S6249)
    // enforceSSL  is turned on in the default properties that Sonarqube doesn't see
    // Verified by unit test 's3 bucket with default props'
    // NOSONAR (typescript:typescript:S6249)
    // versioning is turned on in the default properties that Sonarqube doesn't see
    // Verified by unit test 's3 bucket with default props'
    const cloudfrontLogBucket = new s3.Bucket(scope, bucketId, combinedBucketProps); // NOSONAR
    return cloudfrontLogBucket;
}
exports.createCloudFrontLoggingBucket = createCloudFrontLoggingBucket;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function createAlbLoggingBucket(scope, bucketId, loggingBucketProps) {
    // Introduce the default props since we can't be certain the caller used them and
    // they are important best practices
    const combinedBucketProps = utils_1.consolidateProps(s3_bucket_defaults_1.DefaultS3Props(), loggingBucketProps);
    // Create the Logging Bucket
    // NOSONAR (typescript:S6281)
    // Block Public Access is set by DefaultS3Props, but Sonarqube can't detect it
    // It is verified by 's3 bucket with default props' in the unit tests
    // NOSONAR (typescript:S6245)
    // Encryption is turned on in the default properties that Sonarqube doesn't see
    // Verified by unit test 's3 bucket with default props'
    // NOSONAR (typescript:S6249)
    // enforceSSL  is turned on in the default properties that Sonarqube doesn't see
    // Verified by unit test 's3 bucket with default props'
    // NOSONAR (typescript:typescript:S6249)
    // versioning is turned on in the default properties that Sonarqube doesn't see
    // Verified by unit test 's3 bucket with default props'
    const loggingBucket = new s3.Bucket(scope, bucketId, combinedBucketProps); // NOSONAR
    // Extract the CfnBucket from the loggingBucket
    const loggingBucketResource = loggingBucket.node.findChild('Resource');
    utils_1.addCfnSuppressRules(loggingBucketResource, [
        {
            id: 'W35',
            reason: "This is a log bucket for an Application Load Balancer"
        }
    ]);
    return loggingBucket;
}
exports.createAlbLoggingBucket = createAlbLoggingBucket;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildS3Bucket(scope, props, bucketId) {
    /** Default Life Cycle policy to transition older versions to Glacier after 90 days */
    const lifecycleRules = [{
            noncurrentVersionTransitions: [{
                    storageClass: aws_s3_1.StorageClass.GLACIER,
                    transitionAfter: aws_cdk_lib_1.Duration.days(90)
                }]
        }];
    // Create the Application Bucket
    let defaultBucketProps;
    let loggingBucket;
    const resolvedBucketId = bucketId ? bucketId + 'S3Bucket' : 'S3Bucket';
    const loggingBucketId = bucketId ? bucketId + 'S3LoggingBucket' : 'S3LoggingBucket';
    // If logging S3 access logs is enabled/undefined and an existing bucket object is not provided
    if (props.logS3AccessLogs !== false && !(props.bucketProps?.serverAccessLogsBucket)) {
        // Create the Logging Bucket
        let loggingBucketProps = s3_bucket_defaults_1.DefaultS3Props();
        if (props.loggingBucketProps) {
            // User provided logging bucket props
            loggingBucketProps = utils_1.overrideProps(loggingBucketProps, props.loggingBucketProps);
        }
        else if (props.bucketProps?.removalPolicy) {
            // If the client explicitly specified a removal policy for the main bucket,
            // then replicate that policy on the logging bucket
            loggingBucketProps = utils_1.overrideProps(loggingBucketProps, { removalPolicy: props.bucketProps.removalPolicy });
        }
        loggingBucket = createS3AccessLoggingBucket(scope, loggingBucketId, loggingBucketProps);
    }
    else if (props.bucketProps?.serverAccessLogsBucket) {
        loggingBucket = props.bucketProps?.serverAccessLogsBucket;
    }
    // Attach the Default Life Cycle policy ONLY IF the versioning is ENABLED
    if (props.bucketProps?.versioned === undefined || props.bucketProps.versioned) {
        defaultBucketProps = s3_bucket_defaults_1.DefaultS3Props(loggingBucket, lifecycleRules);
    }
    else {
        defaultBucketProps = s3_bucket_defaults_1.DefaultS3Props(loggingBucket);
    }
    const combinedBucketProps = utils_1.consolidateProps(defaultBucketProps, props.bucketProps);
    // NOSONAR (typescript:S6281) - Block Public Access is set by DefaultS3Props,
    // but Sonarqube can't detect it
    // It is verified by 's3 bucket with default props' in the unit tests
    // NOSONAR (typescript:S6245)
    // Encryption is turned on in the default properties that Sonarqube doesn't see
    // Verified by unit test 's3 bucket with default props'
    // NOSONAR (typescript:S6249)
    // enforceSSL  is turned on in the default properties that Sonarqube doesn't see
    // Verified by unit test 's3 bucket with default props'
    // NOSONAR (typescript:typescript:S6249)
    // versioning is turned on in the default properties that Sonarqube doesn't see
    // Verified by unit test 's3 bucket with default props'
    const s3Bucket = new s3.Bucket(scope, resolvedBucketId, combinedBucketProps); // NOSONAR
    return { bucket: s3Bucket, loggingBucket };
}
exports.buildS3Bucket = buildS3Bucket;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function addCfnNagS3BucketNotificationRulesToSuppress(stackRoot, logicalId) {
    const notificationsResourceHandler = stackRoot.node.tryFindChild(logicalId);
    const notificationsResourceHandlerRoleRole = notificationsResourceHandler.node.findChild('Role');
    const notificationsResourceHandlerRolePolicy = notificationsResourceHandlerRoleRole.node.findChild('DefaultPolicy');
    // Extract the CfnFunction from the Function
    const fnResource = notificationsResourceHandler.node.findChild('Resource');
    utils_1.addCfnSuppressRules(fnResource, [
        {
            id: 'W58',
            reason: `Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.`
        },
        {
            id: 'W89',
            reason: `This is not a rule for the general case, just for specific use cases/industries`
        },
        {
            id: 'W92',
            reason: `Impossible for us to define the correct concurrency for clients`
        }
    ]);
    // Extract the CfnPolicy from the iam.Policy
    const policyResource = notificationsResourceHandlerRolePolicy.node.findChild('Resource');
    utils_1.addCfnSuppressRules(policyResource, [
        {
            id: 'W12',
            reason: `Bucket resource is '*' due to circular dependency with bucket and role creation at the same time`
        }
    ]);
}
exports.addCfnNagS3BucketNotificationRulesToSuppress = addCfnNagS3BucketNotificationRulesToSuppress;
function CheckS3Props(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if ((propsObject.existingBucketObj || propsObject.existingBucketInterface) && propsObject.bucketProps) {
        errorMessages += 'Error - Either provide bucketProps or existingBucketObj, but not both.\n';
        errorFound = true;
    }
    if (propsObject.existingLoggingBucketObj && propsObject.loggingBucketProps) {
        errorMessages += 'Error - Either provide existingLoggingBucketObj or loggingBucketProps, but not both.\n';
        errorFound = true;
    }
    if ((propsObject?.logS3AccessLogs === false) && (propsObject.loggingBucketProps || propsObject.existingLoggingBucketObj)) {
        errorMessages += 'Error - If logS3AccessLogs is false, supplying loggingBucketProps or existingLoggingBucketObj is invalid.\n';
        errorFound = true;
    }
    if (propsObject.existingBucketObj && (propsObject.loggingBucketProps || propsObject.logS3AccessLogs)) {
        errorMessages += 'Error - If existingBucketObj is provided, supplying loggingBucketProps or logS3AccessLogs is an error.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
exports.CheckS3Props = CheckS3Props;
//# sourceMappingURL=data:application/json;base64,